{
  "version": 3,
  "sources": ["../../src/bot.ts"],
  "sourcesContent": ["import type { StartBotParams } from \"zilch-game-engine\";\n\nZilch.Bot = class Bot {\n  params: StartBotParams;\n\n  constructor(params: StartBotParams) {\n    this.params = params;\n  }\n\n  static start(params: StartBotParams) {\n    return new Bot(params);\n  }\n\n  move(payload: string): string {\n    const board = payload.split(\"|\").map((row) => row.split(\",\"));\n    const player = this.params.botIndex === 0 ? \"x\" : \"o\";\n\n    const availableMoves: { x: number; y: number }[] = [];\n\n    for (let x = 0; x < 3; x++) {\n      for (let y = 0; y < 3; y++) {\n        if (board[x]![y] === \"empty\") {\n          availableMoves.push({ x, y });\n        }\n      }\n    }\n\n    const randomMove =\n      availableMoves[Math.floor(availableMoves.length * Math.random())];\n\n    if (!randomMove) {\n      return \"0,0\";\n    }\n\n    if (this.params.type === \"practice\") {\n      return randomMove.x + \",\" + randomMove.y;\n    }\n\n    // Easy bot just blocks...\n    if (this.params.type === \"boss-easy\" || this.params.type === \"boss-hard\") {\n      const winningMove = availableMoves.find(({ x, y }) => {\n        board[x]![y] = player;\n        const result = this.hasVictory(board, player);\n        board[x]![y] = \"empty\";\n        return result;\n      });\n\n      if (winningMove) {\n        return winningMove.x + \",\" + winningMove.y;\n      }\n    }\n\n    // Medium bot just looks to win...\n    // Hard bot does both\n    if (\n      this.params.type === \"boss-medium\" ||\n      this.params.type === \"boss-hard\"\n    ) {\n      const otherPlayer = player === \"x\" ? \"o\" : \"x\";\n      const savingMove = availableMoves.find(({ x, y }) => {\n        board[x]![y] = otherPlayer;\n        const result = this.hasVictory(board, otherPlayer);\n        board[x]![y] = \"empty\";\n        return result;\n      });\n\n      if (savingMove) {\n        return savingMove.x + \",\" + savingMove.y;\n      }\n    }\n\n    return randomMove.x + \",\" + randomMove.y;\n  }\n\n  hasVictory(board: string[][], player: string) {\n    const topLeft = { x: 0, y: 0 };\n    const topCenter = { x: 0, y: 1 };\n    const topRight = { x: 0, y: 2 };\n\n    const centerLeft = { x: 1, y: 0 };\n    const centerCenter = { x: 1, y: 1 };\n    const centerRight = { x: 1, y: 2 };\n\n    const bottomLeft = { x: 2, y: 0 };\n    const bottomCenter = { x: 2, y: 1 };\n    const bottomRight = { x: 2, y: 2 };\n\n    const winningLines = [\n      [topLeft, topCenter, topRight],\n      [centerLeft, centerCenter, centerRight],\n      [bottomLeft, bottomCenter, bottomRight],\n\n      [topLeft, centerLeft, bottomLeft],\n      [topCenter, centerCenter, bottomCenter],\n      [topRight, centerRight, bottomRight],\n\n      [topLeft, centerCenter, bottomRight],\n      [bottomLeft, centerCenter, topRight],\n    ];\n\n    return winningLines.some((line) =>\n      line.every((position) => board[position.x]![position.y] === player)\n    );\n  }\n\n  end() {\n    this.params.println(\"Good game!\");\n  }\n};\n"],
  "mappings": "AAEA,MAAM,IAAM,MAAMA,CAAI,CACpB,OAEA,YAAYC,EAAwB,CAClC,KAAK,OAASA,CAChB,CAEA,OAAO,MAAMA,EAAwB,CACnC,OAAO,IAAID,EAAIC,CAAM,CACvB,CAEA,KAAKC,EAAyB,CAC5B,IAAMC,EAAQD,EAAQ,MAAM,GAAG,EAAE,IAAKE,GAAQA,EAAI,MAAM,GAAG,CAAC,EACtDC,EAAS,KAAK,OAAO,WAAa,EAAI,IAAM,IAE5CC,EAA6C,CAAC,EAEpD,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACrB,QAASC,EAAI,EAAGA,EAAI,EAAGA,IACjBL,EAAMI,CAAC,EAAGC,CAAC,IAAM,SACnBF,EAAe,KAAK,CAAE,EAAAC,EAAG,EAAAC,CAAE,CAAC,EAKlC,IAAMC,EACJH,EAAe,KAAK,MAAMA,EAAe,OAAS,KAAK,OAAO,CAAC,CAAC,EAElE,GAAI,CAACG,EACH,MAAO,MAGT,GAAI,KAAK,OAAO,OAAS,WACvB,OAAOA,EAAW,EAAI,IAAMA,EAAW,EAIzC,GAAI,KAAK,OAAO,OAAS,aAAe,KAAK,OAAO,OAAS,YAAa,CACxE,IAAMC,EAAcJ,EAAe,KAAK,CAAC,CAAE,EAAAC,EAAG,EAAAC,CAAE,IAAM,CACpDL,EAAMI,CAAC,EAAGC,CAAC,EAAIH,EACf,IAAMM,EAAS,KAAK,WAAWR,EAAOE,CAAM,EAC5C,OAAAF,EAAMI,CAAC,EAAGC,CAAC,EAAI,QACRG,CACT,CAAC,EAED,GAAID,EACF,OAAOA,EAAY,EAAI,IAAMA,EAAY,CAE7C,CAIA,GACE,KAAK,OAAO,OAAS,eACrB,KAAK,OAAO,OAAS,YACrB,CACA,IAAME,EAAcP,IAAW,IAAM,IAAM,IACrCQ,EAAaP,EAAe,KAAK,CAAC,CAAE,EAAAC,EAAG,EAAAC,CAAE,IAAM,CACnDL,EAAMI,CAAC,EAAGC,CAAC,EAAII,EACf,IAAMD,EAAS,KAAK,WAAWR,EAAOS,CAAW,EACjD,OAAAT,EAAMI,CAAC,EAAGC,CAAC,EAAI,QACRG,CACT,CAAC,EAED,GAAIE,EACF,OAAOA,EAAW,EAAI,IAAMA,EAAW,CAE3C,CAEA,OAAOJ,EAAW,EAAI,IAAMA,EAAW,CACzC,CAEA,WAAWN,EAAmBE,EAAgB,CAC5C,IAAMS,EAAU,CAAE,EAAG,EAAG,EAAG,CAAE,EACvBC,EAAY,CAAE,EAAG,EAAG,EAAG,CAAE,EACzBC,EAAW,CAAE,EAAG,EAAG,EAAG,CAAE,EAExBC,EAAa,CAAE,EAAG,EAAG,EAAG,CAAE,EAC1BC,EAAe,CAAE,EAAG,EAAG,EAAG,CAAE,EAC5BC,EAAc,CAAE,EAAG,EAAG,EAAG,CAAE,EAE3BC,EAAa,CAAE,EAAG,EAAG,EAAG,CAAE,EAC1BC,EAAe,CAAE,EAAG,EAAG,EAAG,CAAE,EAC5BC,EAAc,CAAE,EAAG,EAAG,EAAG,CAAE,EAejC,MAbqB,CACnB,CAACR,EAASC,EAAWC,CAAQ,EAC7B,CAACC,EAAYC,EAAcC,CAAW,EACtC,CAACC,EAAYC,EAAcC,CAAW,EAEtC,CAACR,EAASG,EAAYG,CAAU,EAChC,CAACL,EAAWG,EAAcG,CAAY,EACtC,CAACL,EAAUG,EAAaG,CAAW,EAEnC,CAACR,EAASI,EAAcI,CAAW,EACnC,CAACF,EAAYF,EAAcF,CAAQ,CACrC,EAEoB,KAAMO,GACxBA,EAAK,MAAOC,GAAarB,EAAMqB,EAAS,CAAC,EAAGA,EAAS,CAAC,IAAMnB,CAAM,CACpE,CACF,CAEA,KAAM,CACJ,KAAK,OAAO,QAAQ,YAAY,CAClC,CACF",
  "names": ["Bot", "params", "payload", "board", "row", "player", "availableMoves", "x", "y", "randomMove", "winningMove", "result", "otherPlayer", "savingMove", "topLeft", "topCenter", "topRight", "centerLeft", "centerCenter", "centerRight", "bottomLeft", "bottomCenter", "bottomRight", "line", "position"]
}
